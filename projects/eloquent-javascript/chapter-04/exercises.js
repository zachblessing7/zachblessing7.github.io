////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
 var arr = [];
    for (var i = start; step > 1 || step === undefined ? i <= end : i >= end; step ? i = i + step : i++)
    if(start === end){
      return [];
    } else{
        arr.push(i);
    }
    return arr;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(arr) {
if(arr.length === 0){
  return 0;
}
return arr.reduce(function(x, y) {
  return x + y;
   });
 }

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
let reversed=[];
 for(let i=arr.length-1; i>=0; i--){
      reversed.push(arr[i]); 
    }
  return reversed;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {
  var temp = 0;
    for (var i = 0; i < arr.length / 2; i++) {
        temp = arr[i];
        arr[i] = arr[arr.length - i - 1];
        arr[arr.length - i - 1] = temp;
    }
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(arr) {
let list=null;
  for(let i=arr.length-1; i>=0; i--){
    list = {
      value:arr[i], 
      rest:list
    };
  }
  return list; 
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
 let arr= [];
  for(const prop in list) {
   const value = list[prop];
    typeof value === 'object'? arr.push(listToArray(value)) : arr.push(value);
  }
  arr=[].concat.apply([], arr);
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, rest) {
  let list = {
   value:value,
    rest:rest,
  };
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, num) {
 if(num < 0){
   return undefined;
 }
  return num === 0 ? (list.value) : (nth(list.rest, num-1));
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(value1, value2) {
  if (value1 === value2) return true;
 
    if (value1 === null || typeof value1 !== "object" ||
        value2 === null || typeof value2 !== "object") return false;
  
    let keysA = Object.keys(value1);
    let keysB = Object.keys(value2);
  
    if (keysA.length !== keysB.length) return false;
 
    for (let key of keysA) {
      if (!keysB.includes(key) || !deepEqual(value1[key], value2[key])) return false;
    }
    return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
